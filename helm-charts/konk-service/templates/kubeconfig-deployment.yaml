apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "konk-service.fullname" . }}-kubeconfig
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "konk-service.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "konk-service.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: kubeconfig
  template:
    metadata:
      annotations:
        checksum/values: {{ print .Values | sha256sum }}
      labels:
        {{- include "konk-service.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: kubeconfig
    spec:
      serviceAccountName: {{ include "konk-service.serviceAccountName" . }}
      containers:
      - name: kind
        securityContext:
          {{- toYaml .Values.kind.securityContext | nindent 10 }}
        image: "{{ .Values.kind.image.repository }}:{{ .Values.kind.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.kind.image.pullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
          - |
            set -x
            while true
            do
              # Create KUBECONFIG formatted cert from CertManager certificate
              # these command run in konk
              export KUBECONFIG=$KUBECONFIG_PATH
              # https://kubernetes.io/docs/setup/best-practices/certificates/#configure-certificates-for-user-accounts
              kubectl config set-cluster {{ .Values.konk.name }} \
                --server=https://{{ include "konk-service.konkfqdn" . }}:6443 \
                --certificate-authority /tmp/certs/ca.crt \
                --embed-certs
              kubectl config set-credentials kubernetes-admin \
                --client-certificate /tmp/certs/tls.crt \
                --client-key /tmp/certs/tls.key \
                --embed-certs
              kubectl config set-context {{ .Values.konk.name }} --cluster {{ .Values.konk.name }} --user kubernetes-admin
              kubectl config use-context {{ .Values.konk.name }}

              # these commands run in infra cluster
              unset KUBECONFIG
              if [ "$(kubectl -n $NAMESPACE get secret {{ include "konk-service.fullname" . }}-kubeconfig --ignore-not-found 2>&1 )" = "" ]
              then
                kubectl -n $NAMESPACE create secret generic {{ include "konk-service.fullname" . }}-kubeconfig \
                  --from-file=$KUBECONFIG_PATH
                kubectl -n $NAMESPACE label secret {{ include "konk-service.fullname" . }}-kubeconfig $LABELS
                # FIXME: set owner as deployment UID
                DEPLOYMENT_UID=$(kubectl -n $NAMESPACE get deploy {{ include "konk-service.fullname" . }}-kubeconfig -o jsonpath='{.metadata.uid}')
                echo "Found UID: $DEPLOYMENT_UID"
                kubectl -n $NAMESPACE patch secret {{ include "konk-service.fullname" . }}-kubeconfig -p '{"metadata":{"ownerReferences":[{"apiVersion":"apps/v1", "kind":"Deployment", "name":"{{ include "konk-service.fullname" . }}-kubeconfig", "uid":"'$DEPLOYMENT_UID'"}]}}'
              else
                echo TODO: kubectl patch to renew cert
              fi
              echo $? > /tmp/status

              date
              # 3m loop with 30s jitter
              sleep $[ 150 + ( $RANDOM % 30 ) ]
            done
        env:
          - name: KUBECONFIG_PATH
            value: /etc/kubernetes/admin.conf
          - name: LABELS
            value: {{ (include "konk-service.selectorLabels" .) | replace ": " "=" | replace "\n" " " }}
          - name: NAMESPACE
            value: {{ .Release.Namespace }}
          - name: MY_PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        volumeMounts:
        - name: kubeconfig
          mountPath: "/etc/kubernetes"
        - name: kubeconfig-cert
          mountPath: /tmp/certs
          readOnly: true
        resources:
          {{- toYaml .Values.kind.resources | nindent 10 }}
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "exit $(</tmp/status)"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: kubeconfig
        emptyDir: {}
      - name: kubeconfig-cert
        secret:
          secretName: {{ include "konk-service.fullname" . }}-kubeconfig-cert
