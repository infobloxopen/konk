apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "konk-service.fullname" . }}-kubectl
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "konk-service.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "konk-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/values: {{ print .Values | sha256sum }}
      labels:
        {{- include "konk-service.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "konk-service.serviceAccountName" . }}
      initContainers:
      - name: kubeconfig
        securityContext:
          {{- toYaml .Values.kind.securityContext | nindent 10 }}
        image: "{{ .Values.kind.image.repository }}:{{ .Values.kind.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.kind.image.pullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
          - |
            # https://kubernetes.io/docs/setup/best-practices/certificates/#configure-certificates-for-user-accounts
            kubectl config set-cluster {{ .Values.konk.name }} \
              --server=https://{{ include "konk-service.konkfqdn" . }}:6443 \
              --certificate-authority /tmp/certs/ca.crt \
              --embed-certs
            kubectl config set-credentials kubernetes-admin \
              --client-certificate /tmp/certs/tls.crt \
              --client-key /tmp/certs/tls.key \
              --embed-certs
            kubectl config set-context {{ .Values.konk.name }} --cluster {{ .Values.konk.name }} --user kubernetes-admin
            kubectl config use-context {{ .Values.konk.name }}
        env:
          - name: KUBECONFIG
            value: /etc/kubernetes/admin.conf
        volumeMounts:
        - name: kubeconfig
          mountPath: "/etc/kubernetes"
        - name: kubeconfig-cert
          mountPath: /tmp/certs
          readOnly: true
      containers:
      - name: kind
        securityContext:
          {{- toYaml .Values.kind.securityContext | nindent 10 }}
        image: "{{ .Values.kind.image.repository }}:{{ .Values.kind.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.kind.image.pullPolicy }}
        command: ["/bin/bash", "-c"]
        args: ["while true; do /mounts/deploy-api-service.sh; date; sleep 30; done;"]
        env:
          - name: SERVICENAME
            value: {{ .Values.service.name }}
          - name: NAMESPACE
            value: {{ .Release.Namespace }}
          - name: KUBECONFIG
            value: /etc/kubernetes/admin.conf
          {{- if .Values.crds }}
          - name: CRDS
            value: install
          {{- end }}
        resources:
          {{- toYaml .Values.kind.resources | nindent 10 }}
        volumeMounts:
        - name: kubeconfig
          mountPath: "/etc/kubernetes"
          readOnly: true
        - name: ca-cert
          mountPath: "certs"
          readOnly: true
        - name: mounts
          mountPath: "mounts"
          readOnly: true
        - name: gen
          mountPath: "gen"
        readinessProbe:
          exec:
            command:
            - cat
            - /tmp/healthy
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: kubeconfig
        emptyDir: {}
      - name: kubeconfig-cert
        secret:
          secretName: {{ include "konk-service.fullname" . }}-kubeconfig
      - name: ca-cert
        secret:
          secretName: {{ if .Values.service.caSecretName -}}
          {{ .Values.service.caSecretName }}
          {{- else -}}
          {{ include "konk-service.fullname" . }}-server
          {{- end }}
      - name: mounts
        configMap:
          name: {{ include "konk-service.fullname" . }}-mounts
          defaultMode: 0777
      - name: gen
        emptyDir: {}
